From e5191ba70ad2d723298c18a5c815a85c359add2d Mon Sep 17 00:00:00 2001
From: hwsmm <hwsnemo@gmail.com>
Date: Wed, 12 Jan 2022 11:22:08 +0000
Subject: [PATCH] ps0034 and pp0035 from openglfreak

---
 dlls/ntdll/unix/server.c |  1 +
 server/process.c         | 26 ++++++++++++++++----------
 2 files changed, 17 insertions(+), 10 deletions(-)

diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index 273d72c..bd56d64 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -1453,6 +1453,7 @@ size_t server_init_process(void)
     sigaddset( &server_block_set, SIGUSR1 );
     sigaddset( &server_block_set, SIGUSR2 );
     sigaddset( &server_block_set, SIGCHLD );
+    sigaddset( &server_block_set, SIGQUIT );
     pthread_sigmask( SIG_BLOCK, &server_block_set, NULL );
 
     /* receive the first thread request fd on the main socket */
diff --git a/server/process.c b/server/process.c
index da0f7cd..cd05ae8 100644
--- a/server/process.c
+++ b/server/process.c
@@ -99,7 +99,7 @@ static struct list *process_get_kernel_obj_list( struct object *obj );
 static void process_destroy( struct object *obj );
 static int process_get_esync_fd( struct object *obj, enum esync_type *type );
 static unsigned int process_get_fsync_idx( struct object *obj, enum fsync_type *type );
-static void terminate_process( struct process *process, struct thread *skip, int exit_code );
+static void terminate_process( struct process *process, struct thread *skip, int exit_code, int force );
 
 static const struct object_ops process_ops =
 {
@@ -414,7 +414,7 @@ static void terminate_job( struct job *job, int exit_code )
     LIST_FOR_EACH_ENTRY_SAFE( process, next_process, &job->process_list, struct process, job_entry )
     {
         assert( process->job == job );
-        if (process->running_threads) terminate_process( process, NULL, exit_code );
+        if (process->running_threads) terminate_process( process, NULL, exit_code, 1 );
     }
     job->terminating = 0;
     job->signaled = 1;
@@ -948,7 +948,7 @@ struct process *get_process_from_handle( obj_handle_t handle, unsigned int acces
 }
 
 /* terminate a process with the given exit code */
-static void terminate_process( struct process *process, struct thread *skip, int exit_code )
+static void terminate_process( struct process *process, struct thread *skip, int exit_code, int force )
 {
     struct thread *thread;
 
@@ -961,7 +961,7 @@ restart:
         if (exit_code) thread->exit_code = exit_code;
         if (thread == skip) continue;
         if (thread->state == TERMINATED) continue;
-        kill_thread( thread, 1 );
+        kill_thread( thread, force );
         goto restart;
     }
     release_object( process );
@@ -975,7 +975,7 @@ static void kill_all_processes(void)
     while ((ptr = list_head( &process_list )))
     {
         struct process *process = LIST_ENTRY( ptr, struct process, entry );
-        terminate_process( process, NULL, 1 );
+        terminate_process( process, NULL, 1, 1 );
     }
 }
 
@@ -993,7 +993,7 @@ void kill_console_processes( struct thread *renderer, int exit_code )
             if (process->console && console_get_renderer( process->console ) == renderer) break;
         }
         if (&process->entry == &process_list) break;  /* no process found */
-        terminate_process( process, NULL, exit_code );
+        terminate_process( process, NULL, exit_code, 1 );
     }
 }
 
@@ -1112,7 +1112,7 @@ void kill_process( struct process *process, int violent_death )
 
     if (process->sigkill_timeout) return;  /* already waiting for it to die */
 
-    if (violent_death) terminate_process( process, NULL, 1 );
+    if (violent_death) terminate_process( process, NULL, 1, 1 );
     else
     {
         struct list *ptr;
@@ -1142,7 +1142,7 @@ void detach_debugged_processes( struct debug_obj *debug_obj, int exit_code )
         if (exit_code)
         {
             process->debug_obj = NULL;
-            terminate_process( process, NULL, exit_code );
+            terminate_process( process, NULL, exit_code, 1 );
         }
         else debugger_detach( process, debug_obj );
     }
@@ -1505,16 +1505,22 @@ DECL_HANDLER(open_process)
 DECL_HANDLER(terminate_process)
 {
     struct process *process;
+    int force;
 
     if (req->handle)
     {
         process = get_process_from_handle( req->handle, PROCESS_TERMINATE );
         if (!process) return;
+        force = 1;
     }
-    else process = (struct process *)grab_object( current->process );
+    else
+    {
+        process = (struct process *)grab_object( current->process );
+        force = 0;
+     }
 
     reply->self = (current->process == process);
-    terminate_process( process, current, req->exit_code );
+    terminate_process( process, current, req->exit_code, force );
     release_object( process );
 }
 
-- 
2.17.1

